#!/sbin/sh

### This method script wraps the import of a ZFS pool as an SMF service
### Copyright (C) 2010-2017 by Jim Klimov, on the terms of CDDL license

### SETUP: First of all, customize this value if you are using the simple
### default instance of the wrapping service. Otherwise, instance name of
### the service will be used instead (e.g. if you have many pools to wrap)
DEFAULT_POOL_NAME="pool"

SMF_BASE=""
INSTANCE=""
if [ -n "$SMF_FMRI" ] ; then
	SMF_BASE="`echo "$SMF_FMRI" | sed 's/^\(.*\:.*\)\(\:.*\)$/\1/'`"
	INSTANCE="`echo "$SMF_FMRI" | cut -d: -f3`"
fi

if [ -z "$INSTANCE" ] || [ "$INSTANCE" = default ]; then
    POOL="${DEFAULT_POOL_NAME}"
else
    POOL="$INSTANCE"
fi

### SETUP: Create a dataset that would exist just to be probed after mount
### so the script can quickly verify the pool was mounted and do so without
### calling `zfs` or `zpool` or `df` which might freeze if something went bad.
### You can leave the default value below, but see and follow the comments
### below about actually creating and securing this mountpoint.
TESTMNT="$POOL/tmp"

### SETUP: Protect the pool's base mountpoint from trash (while the pool is
### exported!!!) with the following command (introduced after Solaris 10):
# /bin/chmod S+ci /${POOL}
### SETUP: Create the test dataset with name mathching the mountpoint:
# zfs create -o canmount=on -o mountpoint=/${TESTMNT} ${TESTMNT}

### SETUP (optional): Pool import may be off-set to avoid conflicts
POOL_ALTROOT="/"
### The "-N" option to skip auto-mounting and -R for altroot and
### -o cachefile="$CACHE_FILE" are enforced
POOL_OPTIONS=""

### Note: By default the service will delay import of the pool by 10 min
### after system startup, so you have a chance to cancel it if it breaks
### your system due to e.g. corruption.
### SETUP: Take care to use considerably different delays for different
### pools, essentially so you don't run many 'zfs mount -a' in parallel,
### confusing each other.
DELAY=600
#DELAY=0

### NO-SETUP: This value should be same in all invocations of the script
LOCK_ZFSMOUNTER="/var/run/zfs-smf-mount.lock"

set_poolfiles() {
	### SETUP: You can populate the following files on your rpool/rootfs
	### to manage import of secondary pools - including disabling the
	### import if they are currently broken and cause problems.
	### TODO: For legacy reasons, separator (dash or dot) varies here.
	#CACHE_FILE="/etc/zfs/zpool.cache.${POOL}"
	CACHE_FILE="none"
	DELAY_FILE="/etc/zfs/delay.${POOL}"
	LOCK_USER="/etc/zfs/noimport-${POOL}"
	NOMOUNT_FILE="/etc/zfs/noautomount-${POOL}"

	### This file is created by the script before attempting to import
	### the pool and is cleared after successful self-check. If it is
	### already present during startup, apparently something is broken.
	LOCK_AUTO="/etc/zfs/.autolock.${POOL}"

	FULL_RETRY="/var/run/zfs-smf-mount.${POOL}.mustretry"
}

### TODO: Include the SMF logic if SMF_FMRI is defined, and use svcprop
### to override the preset variables above from SMF; POOL and TESTMNT
### must both be defined, others optional (would be guessed as above).

set_poolfiles

is_mounted() {
    IS_MOUNTED=no
    TEST_MPT="`echo "${POOL_ALTROOT}/${TESTMNT}" | sed 's,//,/,g'`"
    TEST_MPT2="`echo "${POOL_ALTROOT}/${POOL}" | sed 's,//,/,g'`"
    [ -d "${TEST_MPT}" ] && [ -d "${TEST_MPT2}" ] \
    && ( /sbin/mount | egrep "^${TEST_MPT} on ${POOL}/" ) \
    && ( /sbin/mount | egrep "^${TEST_MPT2} on ${POOL} " ) \
    &&   IS_MOUNTED=yes \
    &&   return 0
    return 1
}

is_mounted && echo "NOTE: Dataset ${TEST_MPT} under ${POOL} is currently mounted" >&2 | tee -a /dev/console

case "$1" in
	start)
		if is_mounted && [ ! -f "$FULL_RETRY" ] ; then : ; else
			if [ x"$2" != xnow -a -s "$LOCK_AUTO" ]; then
				echo "ERROR: Earlier attempt to import '${POOL}' failed. Remove the lock-file '$LOCK_AUTO' to retry!" >&2
				if [ -n "${CACHE_FILE}" ] && [ x"${CACHE_FILE}" != xnone ] && [ -s "${CACHE_FILE}" ]; then
					echo "...and possibly remove the '${CACHE_FILE}' if it is also offending!" >&2
				fi
				exit 95
			fi

			if [ x"$2" != xnow -a -f "${DELAY_FILE}" ]; then
				D="`head -1 "${DELAY_FILE}"`"
				[ "$D" -gt 0 ] 2>/dev/null && DELAY="$D"
				unset D
			fi

			if [ x"$2" != xnow -a "${DELAY}" -gt 0 ]; then
				echo "`date`: Delay requested... ${DELAY}sec"
				sleep ${DELAY}
				echo "`date`: Done sleeping"
			fi

			if [ x"$2" != xnow -a -f "${LOCK_USER}" ]; then
				echo "`date`: '${LOCK_USER}' block-file reappeared. Aborting."
				exit 0
			fi

			if [ x"$2" != xnow ] && is_mounted && [ ! -f "$FULL_RETRY" ]; then
				echo "`date`: pool '${POOL}' seems already mounted. Aborting."
				exit 0
			fi

			if [ -n "${CACHE_FILE}" ] && [ x"${CACHE_FILE}" != xnone ] && [ -s "${CACHE_FILE}.bak" ] && [ ! -s "${CACHE_FILE}" ]; then
				echo "=== Restoring custom cache file from backup: ${CACHE_FILE}"
				cp -pf "${CACHE_FILE}.bak" "${CACHE_FILE}" \
				|| { echo "=== Failed to restore custom cache file: ${CACHE_FILE}, trying to remove it then" >&2; rm -f "${CACHE_FILE}"; }
			fi

			touch "$LOCK_AUTO" "$FULL_RETRY"
			echo "=== Importing '${POOL}'..." | tee -a /dev/console
			time zpool import -R "${POOL_ALTROOT}" -o cachefile="${CACHE_FILE}" -N $POOL_OPTIONS "${POOL}"
			RET=$?

			if [ x"$RET" = x0 ]; then
				echo "=== Some stats ..."
				time zpool list "${POOL}" && \
				time zpool iostat -v "${POOL}" && \
				time zpool status -v "${POOL}" && \
				if [ -f "${NOMOUNT_FILE}" ]; then
					echo "=== Not mounting ALL of '$POOL' datasets due to '$NOMOUNT_FILE'" | tee -a /dev/console
					echo "=== Mounting root DS only:" | tee -a /dev/console
					time zfs mount "${POOL}" || RET=$?
					echo "=== Try to mount the test dataset '$TESTMNT':" | tee -a /dev/console
					time zfs mount "${TESTMNT}" || RET=$?
				else
					[ -s "$LOCK_ZFSMOUNTER" ] && echo "=== Waiting for LOCK_ZFSMOUNTER='$LOCK_ZFSMOUNTER' to get released..." | tee -a /dev/console
					while [ -s "$LOCK_ZFSMOUNTER" ] ; do
						sleep 5
					done
					echo "$$" > "$LOCK_ZFSMOUNTER"
					echo "=== zfs mount -a due to pool $POOL ..." | tee -a /dev/console
					time zfs mount -a || RET=$?
					rm -f "$LOCK_ZFSMOUNTER"
				fi
			fi

			echo "=== Pool ${POOL} import completed with exit-code $RET" | tee -a /dev/console
			rm -f "$LOCK_AUTO"
			[ "$RET" = 0 ] && rm -f "$FULL_RETRY"
			exit ${RET}
		fi
		;;
	stop)
		if is_mounted || [ x"$2" = xnow ]; then
			CACHE_FILE_BACKED_UP=no
			if [ -n "${CACHE_FILE}" ] && [ x"${CACHE_FILE}" != xnone ] && [ -s "${CACHE_FILE}" ]; then
				cp -pf "${CACHE_FILE}" "${CACHE_FILE}.bak" && CACHE_FILE_BACKED_UP=yes
			fi
			time zpool export "${POOL}" || \
			( RET=1; while [ $RET != 0 ]; do
			  echo "=== `date`: Forcefully exporting '$POOL'" >&2
			  time zpool export -f "${POOL}"
			  RET=$?
			  echo "=== `date`: Result: $RET"
			  sleep 1
			done )
			if [ $? = 0 ] && [ "$CACHE_FILE_BACKED_UP" = yes ] ; then
				if [ -s "${CACHE_FILE}" ] && \
				   diff "${CACHE_FILE}" "${CACHE_FILE}.bak" > /dev/null  2>/dev/null \
				; then : ; else
					echo "=== Restoring custom cache file: ${CACHE_FILE}"
					cp -pf "${CACHE_FILE}.bak" "${CACHE_FILE}" \
					|| { echo "=== Failed to restore custom cache file: ${CACHE_FILE}, trying to remove it then" >&2; rm -f "${CACHE_FILE}"; }
				fi
			fi
		fi | tee -a /dev/console
		;;
	status)
		echo "=== Status for pool '$POOL' with test dataset '$TESTMNT':"
		is_mounted && M=YES || M=NO
		echo "=== Imported and mounted = $M"

		echo "=== ZFS info:"
		time zpool list "${POOL}" && \
		time zpool iostat -v "${POOL}" && \
		time zpool status -v "${POOL}" && \
		df -k "${POOL}"
		;;
esac
